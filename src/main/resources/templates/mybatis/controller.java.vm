package ${package.Controller};

import com.shipmap.framework.BaseController;
import com.shipmap.framework.JsonResult;
import com.shipmap.framework.PageResult;
import com.shipmap.framework.utils.JSONUtil;
import com.shipmap.framework.utils.StringUtil;

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.*;

/**
 * @author ${author}
 * @since ${date}
 */
@Api(value = "${entity}相关的接口", tags = "user")
@RestController
@RequestMapping("/${package.ModuleName}/${table.entityPath}")
public class ${table.controllerName} extends BaseController{

private final Logger logger=LoggerFactory.getLogger(${table.controllerName}.class);

@Autowired
public ${table.serviceName} ${table.entityPath}Service;

/**
 * 查询${entity}列表
 */

@ApiOperation(value = "查询所有${entity}", notes = "")
@ApiImplicitParams({
        @ApiImplicitParam(name = "page", value = "第几页", required = true, dataType = "Integer"),
        @ApiImplicitParam(name = "limit", value = "每页多少条", required = true, dataType = "Integer"),
        @ApiImplicitParam(name = "searchKey", value = "筛选条件字段", dataType = "String"),
        @ApiImplicitParam(name = "searchValue", value = "筛选条件关键字", dataType = "String"),
        @ApiImplicitParam(name = "token", value = "令牌", required = true, dataType = "String")
})
@PostMapping("/query")
public PageResult<${entity}> list(Integer page,Integer limit,String searchKey,String searchValue){
        if(page==null){
        page=0;
        limit=0;
        }
        if(StringUtil.isBlank(searchValue)){
        searchKey=null;
        }
        return ${table.entityPath}Service.list(page,limit,searchKey,searchValue);
        }

/**
 * 添加${entity}
 * @ApiImplicitParam(name = "roleId", value = "用户角色id，多个用','分割", required = true, dataType = "String"),
 **/
@ApiOperation(value = "添加${entity}", notes = "")
@ApiImplicitParams({
        @ApiImplicitParam(name = "${table.entityPath}", value = "${entity}信息", required = true, dataType = "${entity}"),
        @ApiImplicitParam(name = "token", value = "令牌", required = true, dataType = "String")
})
@PostMapping()
public JsonResult add(${entity} ${table.entityPath}){
        if(${table.entityPath}Service.add(${table.entityPath},getLoginUser())){
        return JsonResult.ok("添加成功");
        }else{
        return JsonResult.error("添加失败");
        }
        }

/**
 * 修改${entity}
 * @ApiImplicitParam(name = "roleId", value = "用户角色id", required = true, dataType = "String"),
 **/
@ApiOperation(value = "修改${entity}", notes = "")
@ApiImplicitParams({
        @ApiImplicitParam(name = "${entity}", value = "${entity}信息", required = true, dataType = "${entity}"),
        @ApiImplicitParam(name = "token", value = "令牌", required = true, dataType = "String")
})
@PutMapping()
public JsonResult update(${entity} ${table.entityPath}){
        if(${table.entityPath}Service.update(${table.entityPath},getLoginUser())){
        return JsonResult.ok("修改成功！");
        }else{
        return JsonResult.error("修改失败！");
        }
        }

/**
 * 删除${entity}
 **/
@ApiOperation(value = "修改${entity}", notes = "")
@ApiImplicitParams({
        @ApiImplicitParam(name = "${entity}", value = "${entity}信息", required = true, dataType = "${entity}"),
        @ApiImplicitParam(name = "token", value = "令牌", required = true, dataType = "String")
})
@DeleteMapping()
public JsonResult delete(String id){
        if(${table.entityPath}Service.delete(id)){
        return JsonResult.ok("删除成功");
        }
        return JsonResult.error("删除失败");
        }

        }